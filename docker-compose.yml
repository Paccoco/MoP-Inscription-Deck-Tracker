version: '3.8'

services:
  #============================================================================
  # PostgreSQL Database
  #============================================================================
  database:
    image: postgres:15-alpine
    container_name: mop-tracker-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-mop_card_tracker}
      POSTGRES_USER: ${DB_USER:-mop_tracker_app}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgresql-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql:ro
      - ./database/init-data.sql:/docker-entrypoint-initdb.d/02-init-data.sql:ro
      - postgres_backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - mop-tracker-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-mop_tracker_app} -d ${DB_NAME:-mop_card_tracker}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    command: >
      postgres 
      -c max_connections=100
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB

  #============================================================================
  # MoP Card Tracker Web Application
  #============================================================================
  web:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mop-tracker-web
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 5000
      
      # Database Configuration
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-mop_card_tracker}
      DB_USER: ${DB_USER:-mop_tracker_app}
      DB_PASSWORD: ${DB_PASSWORD:-secure_password_123}
      DB_POOL_SIZE: 20
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-super-secure-jwt-secret-minimum-32-characters}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-refresh-token-secret-different-from-jwt}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-1h}
      JWT_REFRESH_EXPIRATION: ${JWT_REFRESH_EXPIRATION:-7d}
      
      # Security Configuration
      BCRYPT_ROUNDS: ${BCRYPT_ROUNDS:-12}
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      
      # Notification Configuration
      DISCORD_WEBHOOK_URL: ${DISCORD_WEBHOOK_URL:-}
      DISCORD_ENABLE: ${DISCORD_ENABLE:-false}
      GOTIFY_DEFAULT_SERVER: ${GOTIFY_DEFAULT_SERVER:-}
      GOTIFY_ADMIN_TOKEN: ${GOTIFY_ADMIN_TOKEN:-}
      
      # Performance Configuration
      CACHE_TTL: ${CACHE_TTL:-300}
      ENABLE_PERFORMANCE_MONITORING: ${ENABLE_PERFORMANCE_MONITORING:-true}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      
    ports:
      - "${APP_PORT:-5000}:5000"
    volumes:
      - app_logs:/app/logs
      - app_backups:/app/backups
    networks:
      - mop-tracker-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  #============================================================================
  # Nginx Reverse Proxy (Optional - for SSL and better performance)
  #============================================================================
  nginx:
    image: nginx:alpine
    container_name: mop-tracker-nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_ssl:/etc/nginx/ssl
      - nginx_logs:/var/log/nginx
    networks:
      - mop-tracker-network
    depends_on:
      - web
    profiles:
      - nginx  # Only start nginx if explicitly requested
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  #============================================================================
  # Database Backup Service (Optional)
  #============================================================================
  db-backup:
    image: postgres:15-alpine
    container_name: mop-tracker-backup
    restart: "no"
    environment:
      PGHOST: database
      PGDATABASE: ${DB_NAME:-mop_card_tracker}
      PGUSER: ${DB_USER:-mop_tracker_app}
      PGPASSWORD: ${DB_PASSWORD:-secure_password_123}
    volumes:
      - postgres_backups:/backups
      - ./docker/scripts/backup.sh:/backup.sh:ro
    networks:
      - mop-tracker-network
    depends_on:
      database:
        condition: service_healthy
    profiles:
      - backup  # Only start backup if explicitly requested
    command: /backup.sh

#==============================================================================
# Networks
#==============================================================================
networks:
  mop-tracker-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

#==============================================================================
# Volumes for Persistent Data
#==============================================================================
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/postgres
  
  postgres_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/backups
  
  app_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/logs
  
  app_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/app-backups
  
  nginx_ssl:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/ssl
  
  nginx_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./data}/nginx-logs
